/*
AGPL License
Copyright 2022 ysicing(i@ysicing.me).
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/ysicing/cloudflow/apis/network/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterEndpointLister helps list ClusterEndpoints.
// All objects returned here must be treated as read-only.
type ClusterEndpointLister interface {
	// List lists all ClusterEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterEndpoint, err error)
	// ClusterEndpoints returns an object that can list and get ClusterEndpoints.
	ClusterEndpoints(namespace string) ClusterEndpointNamespaceLister
	ClusterEndpointListerExpansion
}

// clusterEndpointLister implements the ClusterEndpointLister interface.
type clusterEndpointLister struct {
	indexer cache.Indexer
}

// NewClusterEndpointLister returns a new ClusterEndpointLister.
func NewClusterEndpointLister(indexer cache.Indexer) ClusterEndpointLister {
	return &clusterEndpointLister{indexer: indexer}
}

// List lists all ClusterEndpoints in the indexer.
func (s *clusterEndpointLister) List(selector labels.Selector) (ret []*v1beta1.ClusterEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterEndpoint))
	})
	return ret, err
}

// ClusterEndpoints returns an object that can list and get ClusterEndpoints.
func (s *clusterEndpointLister) ClusterEndpoints(namespace string) ClusterEndpointNamespaceLister {
	return clusterEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterEndpointNamespaceLister helps list and get ClusterEndpoints.
// All objects returned here must be treated as read-only.
type ClusterEndpointNamespaceLister interface {
	// List lists all ClusterEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterEndpoint, err error)
	// Get retrieves the ClusterEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ClusterEndpoint, error)
	ClusterEndpointNamespaceListerExpansion
}

// clusterEndpointNamespaceLister implements the ClusterEndpointNamespaceLister
// interface.
type clusterEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterEndpoints in the indexer for a given namespace.
func (s clusterEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ClusterEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterEndpoint))
	})
	return ret, err
}

// Get retrieves the ClusterEndpoint from the indexer for a given namespace and name.
func (s clusterEndpointNamespaceLister) Get(name string) (*v1beta1.ClusterEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("clusterendpoint"), name)
	}
	return obj.(*v1beta1.ClusterEndpoint), nil
}
