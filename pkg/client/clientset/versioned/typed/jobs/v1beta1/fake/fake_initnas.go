/*
AGPL License
Copyright 2022 ysicing(i@ysicing.me).
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/ysicing/cloudflow/apis/jobs/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeInitNases implements InitNasInterface
type FakeInitNases struct {
	Fake *FakeJobsV1beta1
	ns   string
}

var initnasesResource = schema.GroupVersionResource{Group: "jobs.ysicing.me", Version: "v1beta1", Resource: "initnases"}

var initnasesKind = schema.GroupVersionKind{Group: "jobs.ysicing.me", Version: "v1beta1", Kind: "InitNas"}

// Get takes name of the initNas, and returns the corresponding initNas object, and an error if there is any.
func (c *FakeInitNases) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.InitNas, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(initnasesResource, c.ns, name), &v1beta1.InitNas{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.InitNas), err
}

// List takes label and field selectors, and returns the list of InitNases that match those selectors.
func (c *FakeInitNases) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.InitNasList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(initnasesResource, initnasesKind, c.ns, opts), &v1beta1.InitNasList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.InitNasList{ListMeta: obj.(*v1beta1.InitNasList).ListMeta}
	for _, item := range obj.(*v1beta1.InitNasList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested initNases.
func (c *FakeInitNases) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(initnasesResource, c.ns, opts))

}

// Create takes the representation of a initNas and creates it.  Returns the server's representation of the initNas, and an error, if there is any.
func (c *FakeInitNases) Create(ctx context.Context, initNas *v1beta1.InitNas, opts v1.CreateOptions) (result *v1beta1.InitNas, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(initnasesResource, c.ns, initNas), &v1beta1.InitNas{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.InitNas), err
}

// Update takes the representation of a initNas and updates it. Returns the server's representation of the initNas, and an error, if there is any.
func (c *FakeInitNases) Update(ctx context.Context, initNas *v1beta1.InitNas, opts v1.UpdateOptions) (result *v1beta1.InitNas, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(initnasesResource, c.ns, initNas), &v1beta1.InitNas{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.InitNas), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeInitNases) UpdateStatus(ctx context.Context, initNas *v1beta1.InitNas, opts v1.UpdateOptions) (*v1beta1.InitNas, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(initnasesResource, "status", c.ns, initNas), &v1beta1.InitNas{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.InitNas), err
}

// Delete takes name of the initNas and deletes it. Returns an error if one occurs.
func (c *FakeInitNases) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(initnasesResource, c.ns, name, opts), &v1beta1.InitNas{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeInitNases) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(initnasesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.InitNasList{})
	return err
}

// Patch applies the patch and returns the patched initNas.
func (c *FakeInitNases) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.InitNas, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(initnasesResource, c.ns, name, pt, data, subresources...), &v1beta1.InitNas{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.InitNas), err
}
